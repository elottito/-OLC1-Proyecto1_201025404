/* --------------------------------------
	C O D I G O    D E    U S U A R I O
--------------------------------------- */

// Importaciones y paquetes
package com.usac.olc1.analizadores;
import java_cup.runtime.Symbol;

import com.usac.olc1.App;
import com.usac.olc1.gui.Consola;
import com.usac.olc1.nodos.*;


// Codigo para el parser, variables, metodos
parser code {:
	// Metodo al que se llama automaticamente ante algun error sintactico.
	public void syntax_error(Symbol s){
		int fila = s.right + 1;
		int columna = s.left + 1;
		String lexema = (String) s.value;
		String descripcion = "Error Sintactico Recuperado<br>Conflicto con el lexema <b>" + lexema + "</b> verificar expresion";		
		Errores errorSinctactico = new Errores(fila, columna, lexema, descripcion);
		App.listaErrores.add(errorSinctactico);
		Consola.println("Error Sintactico (Recuperado)\tLexema [" + lexema + "]\tUbicacion: [" + fila + "," + columna + "]");
		new ErrorNode
	}

	// Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		int fila = s.right + 1;
		int columna = s.left + 1;
		String lexema = (String) s.value;
		String descripcion = "Error Sintactico NO Recuperado<br>Conflicto con el lexema <b>" + lexema + "</b> verificar expresion";
		Errores errorSinctactico = new Errores(fila, columna, lexema, descripcion);
		App.listaErrores.add(errorSinctactico);
		Consola.println("Error Sintactico (NO Recuperado)\tLexema [" + lexema + "]\tUbicacion: [" + fila + "," + columna + "]");
	}
:}

action code {:
	// Codigo para las acciones gramaticales
:}

/* -----------------------------
	D E C L A R A C I O N E S
------------------------------ */

// T E R M I N A L E S
terminal	conj, flecha, percent_d;
terminal 	coma, dospuntos, llave_a, llave_c, puntocoma, virgulilla;
terminal	punto, barra, por, mas, inter;
terminal	simbolo, sim_com_dob, sim_com_sim, salto_linea; 
terminal	cadena, letra, numero, id;

// N O    T E R M I N A L E S					
non terminal	INICIO, LISTA_STMT, STMT, SEPARADOR, LISTA_VALIDAR;
non terminal	CONJUNTO, DEFINICION, INTERVALO, L_CARACTERES, CARACTERES;
non terminal	EXPREREGULAR, EXPR, VALIDAR;
non terminal	IDENTIFICADOR, CARACTER, ESPECIAL;

// Precedencias
precedence left barra;	// Disyuncion
precedence left punto;	// Concatenacion
precedence left por, mas, inter;	// Cerradura de Kleane

/* -----------------------------------------------------------------------
					I N I C I O   G R A M A T I C A
------------------------------------------------------------------------- */

start with INICIO;

INICIO 			::= llave_a LISTA_STMT SEPARADOR LISTA_VALIDAR llave_c;
LISTA_STMT 		::= LISTA_STMT STMT | STMT;
STMT			::= CONJUNTO | EXPREREGULAR;
LISTA_VALIDAR	::= LISTA_VALIDAR VALIDAR | VALIDAR;

//Conjuntos
CONJUNTO 		::=	conj dospuntos IDENTIFICADOR flecha DEFINICION puntocoma;

//Definicion
DEFINICION		::=	  INTERVALO:n1			{:	n1.execute(); 	:}
					| L_CARACTERES		
					| error
				;

//Intervalo
INTERVALO		::=	CARACTER:begin virgulilla CARACTER:end 	{: /**TN**/	RESULT = new IntervaloNode(begin, end);	:}
					;

//Lista de Caracteres
L_CARACTERES	::=   L_CARACTERES coma CARACTERES
					| CARACTERES 
					;

//Caracteres
CARACTERES 		::=   CARACTER
					| ESPECIAL
					;

//Expresiones Regulares
EXPREREGULAR	::= IDENTIFICADOR flecha EXPR puntocoma;
EXPR			::= punto EXPR EXPR 
					| barra EXPR EXPR 
					| por EXPR 
					| mas EXPR 
					| inter EXPR 
					| llave_a IDENTIFICADOR llave_c 
					| cadena 
					| ESPECIAL
					| error;

//Validar definiciones
VALIDAR ::= IDENTIFICADOR dospuntos cadena puntocoma | error;


//Separador
SEPARADOR		::= percent_d percent_d | error;

//Identificador
IDENTIFICADOR 	::=   id:id				{: RESULT id;		:}
					| letra:let			{: RESULT letra;	:}
					;

//Caracter
CARACTER 		::=   letra:le	 		{: RESULT = new ValueNode(le.toString().charAt(0));		:}
					| numero:nu			{: RESULT = new ValueNode(nu.toString().charAt(0));		:} 
					| simbolo:si		{: RESULT = new ValueNode(si.toString().charAt(0));		:} 
					| coma:co			{: RESULT = new ValueNode(co.toString().charAt(0));		:} 
					| dospuntos:dp		{: RESULT = new ValueNode(dp.toString().charAt(0));		:} 
					| llave_a:la 		{: RESULT = new ValueNode(la.toString().charAt(0));		:} 
					| llave_c:lc		{: RESULT = new ValueNode(lc.toString().charAt(0));		:} 
					| puntocoma:pc 		{: RESULT = new ValueNode(pc.toString().charAt(0));		:} 
					| punto:pt			{: RESULT = new ValueNode(pt.toString().charAt(0));		:} 
					| barra:br			{: RESULT = new ValueNode(br.toString().charAt(0));		:} 
					| por:pr			{: RESULT = new ValueNode(pr.toString().charAt(0));		:} 
					| mas:ms			{: RESULT = new ValueNode(ms.toString().charAt(0));		:} 
					| inter:in			{: RESULT = new ValueNode(in.toString().charAt(0));		:} 
					;

// Simbolo Especial
ESPECIAL		::=   sim_com_dob:scd	{: RESULT = new ValueNode(scd.toString());	:} 
					| sim_com_sim:scs	{: RESULT = new ValueNode(scs.toString());	:} 
					| salto_linea:sli	{: RESULT = new ValueNode(sli.toString());	:} 
					;