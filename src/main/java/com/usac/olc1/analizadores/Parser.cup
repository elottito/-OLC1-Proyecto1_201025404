/* --------------------------------------
	C O D I G O    D E    U S U A R I O
--------------------------------------- */

// Importaciones y paquetes
package com.usac.olc1.analizadores;
import java_cup.runtime.Symbol;

// Codigo para el parser, variables, metodos
parser code {:
	// Metodo al que se llama automaticamente ante algun error sintactico.
	public void syntax_error(Symbol s){
		int fila = s.right + 1;
		int columna = s.left + 1;
		String lexema = (String) s.value;
		System.err.println("Error Sintactico (Recuperado)\tLexema [" + lexema + "]\tUbicacion: [" + fila + "," + columna + "]");
	}

	// Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		int fila = s.right + 1;
		int columna = s.left + 1;
		String lexema = (String) s.value;
		System.out.println("Error Sintactico (No Recuperable) Lexema [" + lexema + "]\tUbicacion: [" + fila + "," + columna + "]");
	}
:}

action code {:
	// Codigo para las acciones gramaticales
:}

/* -----------------------------
	D E C L A R A C I O N E S
------------------------------ */

// T E R M I N A L E S
terminal	conj, flecha, percent_d;
terminal 	coma, dospuntos, llave_a, llave_c, puntocoma, virgulilla;
terminal	punto, barra, por, mas, inter;
terminal	simbolo, sim_com_dob, sim_com_sim, salto_linea; 
terminal	cadena, letra, numero, id;

// N O    T E R M I N A L E S					
non terminal	INICIO, LISTA_STMT, STMT, SEPARADOR, LISTA_VALIDAR;
non terminal	CONJUNTO, DEFINICION, INTERVALO, LISTACARACTER;
non terminal	EXPREREGULAR, EXPR, VALIDAR;
non terminal	IDENTIFICADOR, CARACTER, ESPECIAL;

// Precedencias
precedence left barra;	// Disyuncion
precedence left punto;	// Concatenacion
precedence left por, mas, inter;	// Cerradura de Kleane

/* -----------------------------------------------------------------------
					I N I C I O   G R A M A T I C A
------------------------------------------------------------------------- */

start with INICIO;

INICIO 			::= llave_a LISTA_STMT SEPARADOR LISTA_VALIDAR llave_c;
LISTA_STMT 		::= LISTA_STMT STMT | STMT;
STMT			::= CONJUNTO | EXPREREGULAR;
LISTA_VALIDAR	::= LISTA_VALIDAR VALIDAR | VALIDAR;

//Conjuntos
CONJUNTO 		::=	conj dospuntos IDENTIFICADOR flecha DEFINICION puntocoma;
DEFINICION		::=	INTERVALO | LISTACARACTER | error;
INTERVALO		::=	CARACTER virgulilla CARACTER;
LISTACARACTER	::= LISTACARACTER coma CARACTER | CARACTER;

//Expresiones Regulares
EXPREREGULAR	::= IDENTIFICADOR flecha EXPR puntocoma;
EXPR			::= punto EXPR EXPR 
					| barra EXPR EXPR 
					| por EXPR 
					| mas EXPR 
					| inter EXPR 
					| llave_a IDENTIFICADOR llave_c 
					| cadena 
					| ESPECIAL
					| error;

//Validar definiciones
VALIDAR ::= IDENTIFICADOR dospuntos cadena puntocoma | error;

//Otras Declaraciones
SEPARADOR		::= percent_d percent_d | error;
IDENTIFICADOR 	::= id | letra;
CARACTER 		::= letra | numero | simbolo | 
					coma | dospuntos | llave_a | llave_c | puntocoma |  
					punto | barra | por | mas | inter |
					ESPECIAL;
ESPECIAL		::= sim_com_dob | sim_com_sim | salto_linea;