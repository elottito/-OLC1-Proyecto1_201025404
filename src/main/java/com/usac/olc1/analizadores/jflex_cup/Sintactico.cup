/* --------------------------------------
	C O D I G O    D E    U S U A R I O
--------------------------------------- */

// Importaciones y paquetes
package com.usac.olc1.analizadores;
import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;

import com.usac.olc1.nodos.*;
import com.usac.olc1.st.ExceptionST;
import com.usac.olc1.st.Tree;
import com.usac.olc1.st.Type;
import com.usac.olc1.st.Type.types;
import com.usac.olc1.st.TypeError;

// Codigo para el parser, variables, metodos
parser code {:
	// Metodo al que se llama automaticamente ante algun error sintactico.
	public void syntax_error(Symbol s){
		int line = s.right + 1;
		int column = s.left + 1;
		String lexema = (String) s.value;
		String descripcion = "Recuperado<br>Conflicto con el lexema <b>" + lexema + "</b> verificar expresion";		
		String tipoError = TypeError.typesError.SINTACTICO.toString();
		ExceptionST error = new ExceptionST(tipoError, descripcion, line, column);
		ErrorNode en = new ErrorNode(error, line, column);
		
		//App.tree.arbol.console.add("Error Lexico: -----> " + lexema + "\t[" + line + "," + column + "]");
		//App.tree.arbol.exceptions.add(error);	
				
	}

	// Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		int line = s.right + 1;
		int column = s.left + 1;
		String lexema = (String) s.value;
		String descripcion = "NO Recuperado<br>Conflicto con el lexema <b>" + lexema + "</b> verificar expresion";
		String tipoError = TypeError.typesError.SINTACTICO.toString();
		new ErrorNode( new ExceptionST(tipoError, descripcion, line, column), line, column );
	}
:}

action code {:
	// Codigo para las acciones gramaticales
	public Stack<Node> stackNode = new Stack<Node>();

:}

/* -----------------------------
	D E C L A R A C I O N E S
------------------------------ */

// T E R M I N A L E S
terminal String cadena, letra, id;
terminal String sim_com_dob, sim_com_sim, salto_linea;
terminal String conj, flecha, percent_d;
terminal String	coma, dospuntos, llave_a, llave_c, puntocoma, virgulilla;
terminal String simbolo, numero, punto, barra, por, mas, inter;

// N O    T E R M I N A L E S					
non terminal Tree   INICIO;
non terminal Node	LISTA_STMT, STMT, SEPARADOR, LISTA_VALIDAR;
non terminal Node	CONJUNTO, DEFINICION, INTERVALO;
non terminal Node	EXPREREGULAR, EXPR, VALIDAR;
non terminal Node	CARACTER, ESPECIAL;
non terminal String IDENTIFICADOR;

non terminal ArrayList<Node> L_CARACTERES;
non terminal Node 	CARACTERES;

// Precedencias
precedence left punto;	// a.b
precedence left barra;	// a|b
precedence left inter;  // (a)?
precedence left por, mas;	// Cerradura de Kleane

/* -----------------------------------------------------------------------
					I N I C I O   G R A M A T I C A
------------------------------------------------------------------------- */

start with INICIO;

INICIO 			::= llave_a LISTA_STMT:lista SEPARADOR LISTA_VALIDAR llave_c 	{:  RESULT = new Tree(stackNode);  :}
					;

LISTA_STMT 		::= LISTA_STMT:n1 STMT:n2 		{: stackNode.push(n2);  RESULT = n2;  :}
					| STMT:n1 					{: stackNode.push(n1);  RESULT = n1;  :}
					;

STMT			::= CONJUNTO:n1 				{: RESULT = n1;  :} 
					| EXPREREGULAR
					;
LISTA_VALIDAR	::= LISTA_VALIDAR VALIDAR 
					| VALIDAR
					;

//Conjuntos
CONJUNTO 		::=	conj dospuntos IDENTIFICADOR:id flecha DEFINICION:value puntocoma 
					{: RESULT = new DeclareConjunto( new Type(types.CONJUNTO), id, value, idright, idleft); :}
					;

//Definicion
DEFINICION		::=	  INTERVALO:n1		{: RESULT = n1;									:}
					| L_CARACTERES:n1	{: RESULT = new ListCharNode(n1, n1right, n1left); :}			
					| error
					;

//Intervalo ✓
INTERVALO		::=	CARACTER:n1 virgulilla CARACTER:n2 		{: RESULT = new IntervaloNode(n1, n2, n1right, n1left); :}
					;

//Lista de Caracteres 
L_CARACTERES	::=   L_CARACTERES:n1 coma CARACTERES:n2	{: RESULT = n1; 				RESULT.add(n2);	:}
					| CARACTERES:n1 						{: RESULT = new ArrayList<>();	RESULT.add(n1);	:}
					;

//Expresiones Regulares
EXPREREGULAR	::= IDENTIFICADOR flecha EXPR puntocoma;
EXPR			::=   punto EXPR EXPR 
					| barra EXPR EXPR 
					| por EXPR 
					| mas EXPR 
					| inter EXPR 
					| llave_a IDENTIFICADOR llave_c 
					| cadena 
					| ESPECIAL
					| error;

//Validar definiciones
VALIDAR 		::=   IDENTIFICADOR dospuntos cadena puntocoma 
					| error
					;

//Separador ✓
SEPARADOR		::=   percent_d percent_d 
					| error
					;

//Identificador ✓
IDENTIFICADOR 	::=   id:id				{: RESULT = id;		:}
					| letra:letra		{: RESULT = letra;	:}
					;

//Caracteres ✓
CARACTERES 		::=   CARACTER:n1 {: RESULT = n1; :}
					| ESPECIAL:n1 {: RESULT = n1; :}
					;

//Caracter ✓
CARACTER 		::=   letra:let	 		{: RESULT = new ValueNode(new Type(types.CHAR), let, letright, letleft);	:}
					| numero:num		{: RESULT = new ValueNode(new Type(types.CHAR), num, numright, numleft);	:} 
					| simbolo:sim		{: RESULT = new ValueNode(new Type(types.CHAR), sim, simright, simleft);	:} 
					| coma:com			{: RESULT = new ValueNode(new Type(types.CHAR), com, comright, comleft);	:} 
					| dospuntos:dpt		{: RESULT = new ValueNode(new Type(types.CHAR), dpt, dptright, dptleft);	:} 
					| llave_a:lla 		{: RESULT = new ValueNode(new Type(types.CHAR), lla, llaright, llaleft);	:} 
					| llave_c:llc		{: RESULT = new ValueNode(new Type(types.CHAR), llc, llcright, llcleft);	:} 
					| puntocoma:pcm 	{: RESULT = new ValueNode(new Type(types.CHAR), pcm, pcmright, pcmleft);	:} 
					| punto:pnt			{: RESULT = new ValueNode(new Type(types.CHAR), pnt, pntright, pntleft);	:} 
					| barra:brr			{: RESULT = new ValueNode(new Type(types.CHAR), brr, brrright, brrleft);	:} 
					| por:por			{: RESULT = new ValueNode(new Type(types.CHAR), por, porright, porleft);	:} 
					| mas:mas			{: RESULT = new ValueNode(new Type(types.CHAR), mas, masright, masleft);	:} 
					| inter:qst			{: RESULT = new ValueNode(new Type(types.CHAR), qst, qstright, qstleft);	:} 
					;

// Simbolo Especial
ESPECIAL		::=   sim_com_dob:scd	{: RESULT = new ValueNode(new Type(types.STRING), scd, scdright, scdleft);	:} 
					| sim_com_sim:scs	{: RESULT = new ValueNode(new Type(types.STRING), scs, scsright, scsleft);	:} 
					| salto_linea:sli	{: RESULT = new ValueNode(new Type(types.STRING), sli, sliright, slileft);	:} 
					;